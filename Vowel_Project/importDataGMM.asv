%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\svein\Documents\Skole\NTNU\2023 VÃ¥r\Estimering\Wovels\vowdata_nohead.dat
%
% To extend the code to different selected data or a different text file, generate a function instead of a script.

% Auto-generated by MATLAB on 2023/04/20 09:46:58
clear all
%% Initialize variables.
currentFolder = pwd;
filename = fullfile(currentFolder, 'vowdata_nohead.dat');

%% Format for each line of text:
%   column1: text (%s)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%5s%4f%4f%5f%5f%5f%5f%5f%5f%5f%5f%5f%5f%5f%5f%5f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this code. If an error occurs for a different file, try regenerating the code from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', '', 'WhiteSpace', '', 'TextType', 'string',  'ReturnOnError', false);

%% Remove white space around all cell columns.
dataArray{1} = strtrim(dataArray{1});

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post processing code is included. To generate code which works for unimportable data, select unimportable cells in a file and regenerate the script.

%% Create output variable
vowdatanohead = table(dataArray{1:end-1}, 'VariableNames', {'identifier','durationMS','f0ss','F1_ss','F2_ss','F3_ss','F4_ss','F1_20','F2_20','F3_20','F1_50','F2_50','F3_50','F1_80','F2_80','F3_80'});

%% Clear temporary variables
clearvars filename formatSpec fileID dataArray ans;

%% Classification variables
classes = 12;
features = 15;
dataPerClass = 139;
trainingPerClass = 70;
testPerClass = dataPerClass-trainingPerClass;

numMen = 45; trainNumMen = 22; testNumMen = 23;
numWomen = 48; trainNumWomen = 24; testNumWomen = 24;
numBoys = 27; trainNumBoys = 14; testNumBoys = 13;
numGirls = 19; trainNumGirls = 10; testNumGirls = 9;

testSet = zeros(testPerClass*classes,features);
testLabels = zeros(1,testPerClass*classes);
trainSet = zeros(trainingPerClass*classes,features);
trainLabels = zeros(1,trainingPerClass*classes);


%% Seperating training and test data
% Restructuring data into a 4-dimensional array
data = table2array(vowdatanohead(:, 2:16));
data = reshape(data, [dataPerClass, classes, features]);

% Indexes for splitting data
trainWomenIndex1 = numMen+1;
trainBoysIndex1 = trainWomenIndex1 + numWomen;
trainGirlsIndex1 = trainBoysIndex1 + numBoys;

trainMenIndex2 = trainNumMen;
trainWomenIndex2 = trainWomenIndex1 + trainNumWomen-1;
trainBoysIndex2 = trainBoysIndex1 + trainNumBoys-1;
trainGirlsIndex2 = trainGirlsIndex1 + trainNumGirls-1;

testMenIndex1 = trainMenIndex2+1;
testWomenIndex1 = trainWomenIndex2+1; 
testBoysIndex1 = trainBoysIndex2 +1;
testGirlsIndex1 = trainGirlsIndex2 + 1;

testMenIndex2 = numMen;
testWomenIndex2 = testWomenIndex1 + testNumWomen-1;
testBoysIndex2 = testBoysIndex1 + testNumBoys-1;
testGirlsIndex2 = testGirlsIndex1 + testNumGirls-1;

for i = 1:classes
    % Training data
    menTrainData = reshape(data(1:trainMenIndex2, i, :), [trainNumMen, features]);
    womenTrainData = reshape(data(trainWomenIndex1:trainWomenIndex2, i, :), [trainNumWomen, features]);
    boysTrainData = reshape(data(trainBoysIndex1:trainBoysIndex2, i, :), [trainNumBoys, features]);
    girlsTrainData = reshape(data(trainGirlsIndex1:trainGirlsIndex2, i, :), [trainNumGirls, features]);
    temptest = [menTrainData; womenTrainData; boysTrainData; girlsTrainData];
    temptest2 = trainSet(1+trainingPerClass*(i-1):trainingPerClass*i, :);
    trainSet(1+trainingPerClass*(i-1):trainingPerClass*i, :) = [menTrainData; womenTrainData; boysTrainData; girlsTrainData];
    trainLabels(1+trainingPerClass*(i-1):trainingPerClass*i) = i.*ones(trainingPerClass, 1);
    
    % Testing data
    menTestData = reshape(data(testMenIndex1:testMenIndex2, i, :), [testNumMen, features]);
    womenTestData = reshape(data(testWomenIndex1:testWomenIndex2, i, :), [testNumWomen, features]);
    boysTestData = reshape(data(testBoysIndex1:testBoysIndex2, i, :), [testNumBoys, features]);
    girlsTestData = reshape(data(testGirlsIndex1:testGirlsIndex2, i, :), [testNumGirls, features]);
    testSet(1+testPerClass*(i-1):testPerClass*i, :) = [menTestData; womenTestData; boysTestData; girlsTestData];
    testLabels(1+testPerClass*(i-1):testPerClass*i) = i.*ones(testPerClass, 1);
end 

%% training
GMModels = cell(1,classes); % initialize cell array
for i = 1:classes
    index1 = 1 + trainingPerClass*(i-1);
    index2 = trainingPerClass*i;
    res = trainSet(index1:index2,:);
%     res(res==0) = NaN;
    options = statset('MaxIter',1000);
    GMModels{i} = fitgmdist(res,3, 'RegularizationValue', 1e-10,'CovarianceType','diagonal','Options',options); % store GMM object in cell array
end

%% classification MLR NEW
predictedClasses = zeros(1, length(testSet));
for k =  1:length(testSet)
    xk = testSet(k,:);
    pdf_k = zeros(1,classes);
    for C = 1:classes 
        pdf_temp = mvnpdf(xk,GMModels{C}.mu,GMModels{C}.Sigma);
        for i = 1:GMModels{i}.NumComponents

            pdf_k(C) = pdf_k(C) + GMModels{C}.ComponentProportion(i)*mvnpdf(xk, GMModels{C}.mu(i,:), GMModels{C}.Sigma(:,:,i));
        end
    end
    [~, predictedClasses(k)] = max(pdf_k);
end

%% classification MLR Old
% predictedClasses = zeros(1, length(testSet));
% for k =  1:length(testSet)
%     xk = testSet(k,:);
%     pdf_k = zeros(1,classes);
%     for C = 1:classes 
%         temp = mvnpdf(xk,GMModels{C}.mu,GMModels{C}.Sigma)
%         [pdf_k(C),~] = max(temp);
%     end
%     [~, predictedClasses(k)] = max(pdf_k);
% end

%% classification MAP
% predictedClassesMAP = zeros(1, length(testSet));
% for k = 1:length(testSet)
%     xk = testSet(k,:);
%     posterior_k = zeros(1,classes);
%     for C = 1:classes
%         [~, posterior_k(C)] = posterior(GMModels{C}, xk);
%     end
%     [~, predictedClassesMAP(k)] = max(posterior_k);
% end


%% Plotting Confusion Matrix
confmat = confusionmat(testLabels, predictedClasses);
errorRate = calculateErrorRate(confmat,testPerClass);
fig = plotConfusionMatrixGPT(confmat, 'Confusion Matrix for traing set MAP', errorRate)

% filename = 'confusion_matrix_test.png';
% saveas(fig, filename);


%% Utility functions
function is_pos_def = isPositiveDefinite(A)
% This function checks if a matrix A is positive definite
% Inputs: A - matrix to check
% Outputs: is_pos_def - true if A is positive definite, false otherwise

% Check if A is square
if size(A,1) ~= size(A,2)
    error('Input matrix A must be square.');
end

% Check if A is symmetric
if ~isequal(A,A')
    error('Input matrix A must be symmetric.');
end

% Compute the eigenvalues of A
eig_vals = eig(A);

% Check if all eigenvalues are positive
is_pos_def = all(eig_vals > 0);
end


